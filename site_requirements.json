{
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Requirements Tracking System",
      "description": "System to track and validate all project requirements through JSON file and automated testing",
      "status": "implemented"
    },
    {
      "id": "REQ-002",
      "title": "Requirements Management CLI",
      "description": "Command-line interface for managing project requirements",
      "status": "implemented"
    },
    {
      "id": "REQ-003",
      "title": "User Authentication System",
      "description": "Custom user model with email-based authentication, email verification codes, and role-based access control",
      "status": "implemented"
    },
    {
      "id": "REQ-004",
      "title": "User Registration and Login",
      "description": "Email-based signup and login with verification code system using Azure Email Service",
      "status": "implemented"
    },
    {
      "id": "REQ-005",
      "title": "Role-Based Access Control",
      "description": "User roles including Admin, Contractor, Consultant, User, Parent, Child, Money Manager, and Program Designer with permission-based access",
      "status": "implemented"
    },
    {
      "id": "REQ-006",
      "title": "User Profile Management",
      "description": "Extended user profiles with bio and role management for administrators",
      "status": "implemented"
    },
    {
      "id": "REQ-007",
      "title": "Contact Form System",
      "description": "Public contact form for parents to submit inquiries with interest categories and status tracking",
      "status": "implemented"
    },
    {
      "id": "REQ-008",
      "title": "Email Notification System",
      "description": "Azure Email Service integration for sending verification codes, contact notifications, and confirmations",
      "status": "implemented"
    },
    {
      "id": "REQ-009",
      "title": "Contact Management Dashboard",
      "description": "Admin interface for viewing and managing contact inquiries with search and filtering capabilities",
      "status": "implemented"
    },
    {
      "id": "REQ-010",
      "title": "Program Management System",
      "description": "Comprehensive program type management with roles, costs, and buildout configurations",
      "status": "implemented"
    },
    {
      "id": "REQ-011",
      "title": "Program Type Templates",
      "description": "Program type definitions with target grade levels, rates, and role assignments",
      "status": "implemented"
    },
    {
      "id": "REQ-012",
      "title": "Role and Payout Management",
      "description": "Role definitions with hourly rates and frequency-based payout calculations",
      "status": "implemented"
    },
    {
      "id": "REQ-013",
      "title": "Cost Management System",
      "description": "Base cost tracking and program-specific cost calculations",
      "status": "implemented"
    },
    {
      "id": "REQ-014",
      "title": "Program Buildout Configuration",
      "description": "Program buildout templates with student counts, duration, and financial projections",
      "status": "implemented"
    },
    {
      "id": "REQ-015",
      "title": "Program Instance Management",
      "description": "Specific program offerings with scheduling, location, instructor assignment, and capacity management",
      "status": "implemented"
    },
    {
      "id": "REQ-016",
      "title": "Registration Form Builder",
      "description": "Dynamic form creation system with multiple question types and form templates",
      "status": "implemented"
    },
    {
      "id": "REQ-017",
      "title": "Child Management System",
      "description": "Child profiles for parents with personal information, special needs, and emergency contacts",
      "status": "implemented"
    },
    {
      "id": "REQ-018",
      "title": "Program Registration System",
      "description": "Child registration for program instances with form responses and status tracking",
      "status": "implemented"
    },
    {
      "id": "REQ-019",
      "title": "Financial Calculation Engine",
      "description": "Automated revenue, payout, cost, and profit calculations for programs",
      "status": "implemented"
    },
    {
      "id": "REQ-020",
      "title": "Dashboard Interface",
      "description": "Main dashboard for authenticated users with HTMX-powered statistics",
      "status": "implemented"
    },
    {
      "id": "REQ-021",
      "title": "HTMX Integration",
      "description": "Modern web interface using HTMX for dynamic content updates without JavaScript frameworks",
      "status": "implemented"
    },
    {
      "id": "REQ-022",
      "title": "Bootstrap UI Framework",
      "description": "Responsive web interface using Bootstrap CSS framework for modern styling",
      "status": "implemented"
    },
    {
      "id": "REQ-023",
      "title": "Admin Interface",
      "description": "Django admin integration for managing all models and data",
      "status": "implemented"
    },
    {
      "id": "REQ-024",
      "title": "Testing Framework",
      "description": "Comprehensive test suite for all applications with requirements validation",
      "status": "implemented"
    },
    {
      "id": "REQ-025",
      "title": "Test User Setup System",
      "description": "Management commands to create and configure three test users: jon@nellson.net (Admin), jon.nellson@gmail.com (Parent), and DynamicDiscoveries@nellson.net (Contractor) with sample children and programs for testing",
      "status": "implemented"
    },
    {
      "id": "REQ-026",
      "title": "Custom Template Math Filters",
      "description": "Custom Django template filters for mathematical operations including multiply, divide, subtract, and percentage calculations to support buildout calculations and financial projections",
      "status": "implemented"
    },
    {
      "id": "REQ-027",
      "title": "Custom Admin Interface",
      "description": "Replace Django admin interface with custom pages for all data management operations to maintain consistent user experience and branding",
      "status": "implemented"
    },
    {
      "id": "REQ-028",
      "title": "User Detail View",
      "description": "Comprehensive user detail page showing account information, permissions, children (for parents), programs (for contractors), and management actions with status toggle functionality",
      "status": "implemented"
    },
    {
      "id": "REQ-029",
      "title": "Route Completion System",
      "description": "Self-updating requirements registry with automatic template parsing for undefined routes. System scans HTML templates for Django URL tags, HTMX calls, and href attributes, then prompts for implementation of missing routes",
      "status": "implemented"
    },
    {
      "id": "REQ-030",
      "title": "Cost Management Interface",
      "description": "Admin interface for managing base costs with search functionality, cost details modal, and program assignment tracking. Includes add/edit capabilities and financial summary cards",
      "status": "implemented"
    },
    {
      "id": "REQ-031",
      "title": "Enhanced Program Model Structure",
      "description": "Redesigned program models to align with Excel plan structure. Includes granular responsibilities with frequency-based calculations, buildout-specific role assignments, revenue-based contractor payments, and comprehensive financial tracking with yearly projections",
      "status": "implemented"
    },
    {
      "id": "REQ-033",
      "title": "Refactored Program Management Data Model",
      "description": "Implemented new architecture with simplified ProgramType (name/description only), reusable Role objects with default responsibilities, Responsibility model with frequency-based calculations, ProgramBuildout with versioning and cloning support, BaseCost model with frequency options, and ProgramInstance with contractor assignments and communication capabilities",
      "status": "implemented"
    },
    {
      "id": "REQ-032",
      "title": "Advanced Financial Modeling",
      "description": "Comprehensive financial modeling system with frequency-based calculations, revenue sharing for contractors, buildout overrides, and detailed profit analysis. Supports per-workshop, per-session, per-student, and per-year cost calculations with automatic yearly projections",
      "status": "implemented"
    },
    {
      "id": "REQ-019",
      "title": "Buildout Form Field Validation",
      "description": "Fixed buildout creation form to include all required fields (program_type, title, num_facilitators, num_new_facilitators, workshops_per_facilitator_per_year, students_per_workshop, sessions_per_workshop, new_workshop_concepts_per_year) with proper validation and styling",
      "status": "implemented"
    },
    {
      "id": "REQ-999",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-998",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-034",
      "title": "Program Type Instance Relationship Fix",
      "description": "Fixed AttributeError in admin interface where ProgramType.instances was being accessed incorrectly. Updated views and templates to use the correct relationship path: ProgramType → ProgramBuildout → ProgramInstance. Added instance_count attributes to program types in views for template display",
      "status": "implemented"
    },
    {
      "id": "REQ-017",
      "title": "Registration Management System",
      "description": "Child registration system with form responses, status tracking, and parent dashboard",
      "status": "implemented"
    },
    {
      "id": "REQ-018",
      "title": "Program Management Data Model Refactoring",
      "description": "Refactored program management data model to implement clean architecture with ProgramType (name/description only), Role (reusable with default responsibilities), Responsibility (frequency-based with hours), ProgramBuildout (versioning with computed properties), BaseCost (frequency-based costs), and ProgramInstance (contractor assignments with actual enrollment calculations). Replaced old ProgramRole system with new Responsibility structure.",
      "status": "implemented"
    },
    {
      "id": "REQ-035",
      "title": "ProgramType Roles Relationship Cleanup",
      "description": "Removed references to non-existent program_type.roles relationship from templates and updated all role access to use the correct buildout.roles relationship. Updated buildout_list.html, program_type_buildouts.html, buildout_detail.html, and program_type_confirm_delete.html templates to use buildout.roles instead of program_type.roles. Confirmed ProgramType model is correctly designed with only name and description fields.",
      "status": "implemented"
    },
    {
      "id": "REQ-036",
      "title": "Program Type Management UI Cleanup",
      "description": "Removed 'Manage Roles' buttons and functionality from program type management pages since roles are now managed at the buildout level. Removed roles column from program type management table, updated statistics to show buildouts instead of roles, removed program_type_manage_roles URL, and updated buildout management to redirect role management to buildout edit page.",
      "status": "implemented"
    },
    {
      "id": "REQ-037",
      "title": "Cost Management UI Cleanup",
      "description": "Removed 'Manage Costs' buttons and 'Base Costs' column from program type management pages since costs are now managed at the buildout level. Updated buildout management to redirect cost management to buildout edit page with inline cost assignment formsets. Removed outdated program_type_manage_costs URL, view, and template.",
      "status": "implemented"
    },
    {
      "id": "REQ-038",
      "title": "Cost Management Functionality Fixes",
      "description": "Fixed non-functional edit and delete buttons in cost management interface. Replaced modal-based cost creation with dedicated create/edit pages. Added proper cost detail, edit, and delete views with corresponding templates. Fixed view modal overlay issues and improved user experience with proper navigation between cost management pages.",
      "status": "implemented"
    },
    {
      "id": "REQ-039",
      "title": "Excel-Like Role and Buildout System",
      "description": "Enhanced role and buildout system that mimics the TT After School Workshops Excel structure. Includes default role templates with responsibilities and hours per scope (per workshop concept, per new worker, per workshop, per session), buildout interface for adjusting hours, and comprehensive financial calculations matching the Excel formulas. Supports Facilitators, Operations Support, Service/Support, Business Consultant, and other role categories with frequency-based calculations.",
      "status": "implemented"
    },
    {
      "id": "REQ-040",
      "title": "Role Management Navigation Cleanup",
      "description": "Fixed confusing navigation paths in role management interface. Removed 'Manage Program Types' buttons and functionality from role detail and management pages since roles are now assigned to buildouts, not directly to program types. Fixed 'Assign Roles' button in buildout detail page to correctly link to buildout_assign_roles instead of role_management. Removed role_manage_program_types URL, view, and template. Updated role detail page to clarify that roles are managed through buildouts.",
      "status": "implemented"
    },
    {
      "id": "REQ-041",
      "title": "ProgramBuildout Model Field Restoration",
      "description": "Fixed AttributeError by restoring the new_workshop_concepts_per_year field to the ProgramBuildout model. This field was accidentally removed in migration 0011 but is still referenced in views and templates. Added the field back to the model with default value of 1, updated the form to include the field, and created migration 0012 to restore the field in the database.",
      "status": "implemented"
    },
    {
      "id": "REQ-042",
      "title": "Contractor Dashboard Role-Based Access",
      "description": "Updated contractor dashboard and related views to use the new role-based access model with InstanceRoleAssignment. Replaced references to the old instructor field with contractor_assignments relationship. Updated contractor_dashboard, view_registrations, and send_form_to_participants views to check for program assignments through the contractor_assignments relationship.",
      "status": "implemented"
    },
    {
      "id": "REQ-043",
      "title": "Buildout Form Checkbox Styling Fix",
      "description": "Fixed buildout creation form where Boolean fields (is_active and is_new_workshop) were appearing as empty text inputs instead of proper checkboxes. Updated form initialization to preserve Bootstrap checkbox styling for Boolean fields while maintaining form-control styling for other input types. Added missing new_workshop_concepts_per_year field to the form template.",
      "status": "implemented"
    },
    {
      "id": "REQ-044",
      "title": "Improved Instance Creation Workflow",
      "description": "Restructured instance creation workflow to follow logical hierarchy: Program Type → Buildout → Instance. Moved 'Create Instance' button from program type page to buildout detail page and program instance management page for better user workflow. Updated navigation to reflect the logical progression through the system.",
      "status": "implemented"
    },
    {
      "id": "REQ-045",
      "title": "Custom Program Instance Creation Form",
      "description": "Created custom program instance creation form that matches the site's design instead of redirecting to Django admin backend. Added AdminProgramInstanceForm with proper validation, custom template with Bootstrap styling, and integrated workflow for creating instances from both buildout detail pages and the general instance management page. Form includes smart defaults, validation, and contextual help information.",
      "status": "implemented"
    }
  ],
  "metadata": {
    "version": "1.0",
    "last_updated": "2025-01-27T19:00:00.000000",
    "description": "Dynamic Discoveries project requirements tracking"
  }
}