{
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Requirements Tracking System",
      "description": "System to track and validate all project requirements through JSON file and automated testing",
      "status": "implemented"
    },
    {
      "id": "REQ-002",
      "title": "Requirements Management CLI",
      "description": "Command-line interface for managing project requirements",
      "status": "implemented"
    },
    {
      "id": "REQ-003",
      "title": "User Authentication System",
      "description": "Custom user model with email-based authentication, email verification codes, and role-based access control",
      "status": "implemented"
    },
    {
      "id": "REQ-004",
      "title": "User Registration and Login",
      "description": "Email-based signup and login with verification code system using Azure Email Service",
      "status": "implemented"
    },
    {
      "id": "REQ-005",
      "title": "Role-Based Access Control",
      "description": "User roles including Admin, Contractor, Consultant, User, Parent, Child, Money Manager, and Program Designer with permission-based access",
      "status": "implemented"
    },
    {
      "id": "REQ-006",
      "title": "User Profile Management",
      "description": "Extended user profiles with bio and role management for administrators",
      "status": "implemented"
    },
    {
      "id": "REQ-007",
      "title": "Contact Form System",
      "description": "Public contact form for parents to submit inquiries with interest categories and status tracking",
      "status": "implemented"
    },
    {
      "id": "REQ-008",
      "title": "Email Notification System",
      "description": "Azure Email Service integration for sending verification codes, contact notifications, and confirmations",
      "status": "implemented"
    },
    {
      "id": "REQ-009",
      "title": "Contact Management Dashboard",
      "description": "Admin interface for viewing and managing contact inquiries with search and filtering capabilities",
      "status": "implemented"
    },
    {
      "id": "REQ-010",
      "title": "Program Management System",
      "description": "Comprehensive program type management with roles, costs, and buildout configurations",
      "status": "implemented"
    },
    {
      "id": "REQ-011",
      "title": "Program Type Templates",
      "description": "Program type definitions with target grade levels, rates, and role assignments",
      "status": "implemented"
    },
    {
      "id": "REQ-012",
      "title": "Role and Payout Management",
      "description": "Role definitions with hourly rates and frequency-based payout calculations",
      "status": "implemented"
    },
    {
      "id": "REQ-013",
      "title": "Cost Management System",
      "description": "Base cost tracking and program-specific cost calculations",
      "status": "implemented"
    },
    {
      "id": "REQ-014",
      "title": "Program Buildout Configuration",
      "description": "Program buildout templates with student counts, duration, and financial projections",
      "status": "implemented"
    },
    {
      "id": "REQ-015",
      "title": "Program Instance Management",
      "description": "Specific program offerings with scheduling, location, instructor assignment, and capacity management",
      "status": "implemented"
    },
    {
      "id": "REQ-016",
      "title": "Registration Form Builder",
      "description": "Dynamic form creation system with multiple question types and form templates",
      "status": "implemented"
    },
    {
      "id": "REQ-017",
      "title": "Child Management System",
      "description": "Child profiles for parents with personal information, special needs, and emergency contacts",
      "status": "implemented"
    },
    {
      "id": "REQ-018",
      "title": "Program Registration System",
      "description": "Child registration for program instances with form responses and status tracking",
      "status": "implemented"
    },
    {
      "id": "REQ-019",
      "title": "Financial Calculation Engine",
      "description": "Automated revenue, payout, cost, and profit calculations for programs",
      "status": "implemented"
    },
    {
      "id": "REQ-020",
      "title": "Dashboard Interface",
      "description": "Main dashboard for authenticated users with HTMX-powered statistics",
      "status": "implemented"
    },
    {
      "id": "REQ-021",
      "title": "HTMX Integration",
      "description": "Modern web interface using HTMX for dynamic content updates without JavaScript frameworks",
      "status": "implemented"
    },
    {
      "id": "REQ-022",
      "title": "Bootstrap UI Framework",
      "description": "Responsive web interface using Bootstrap CSS framework for modern styling",
      "status": "implemented"
    },
    {
      "id": "REQ-023",
      "title": "Admin Interface",
      "description": "Django admin integration for managing all models and data",
      "status": "implemented"
    },
    {
      "id": "REQ-024",
      "title": "Testing Framework",
      "description": "Comprehensive test suite for all applications with requirements validation",
      "status": "implemented"
    },
    {
      "id": "REQ-025",
      "title": "Test User Setup System",
      "description": "Management commands to create and configure three test users: jon@nellson.net (Admin), jon.nellson@gmail.com (Parent), and DynamicDiscoveries@nellson.net (Contractor) with sample children and programs for testing",
      "status": "implemented"
    },
    {
      "id": "REQ-026",
      "title": "Custom Template Math Filters",
      "description": "Custom Django template filters for mathematical operations including multiply, divide, subtract, and percentage calculations to support buildout calculations and financial projections",
      "status": "implemented"
    },
    {
      "id": "REQ-027",
      "title": "Custom Admin Interface",
      "description": "Replace Django admin interface with custom pages for all data management operations to maintain consistent user experience and branding",
      "status": "implemented"
    },
    {
      "id": "REQ-028",
      "title": "User Detail View",
      "description": "Comprehensive user detail page showing account information, permissions, children (for parents), programs (for contractors), and management actions with status toggle functionality",
      "status": "implemented"
    },
    {
      "id": "REQ-029",
      "title": "Route Completion System",
      "description": "Self-updating requirements registry with automatic template parsing for undefined routes. System scans HTML templates for Django URL tags, HTMX calls, and href attributes, then prompts for implementation of missing routes",
      "status": "implemented"
    },
    {
      "id": "REQ-030",
      "title": "Cost Management Interface",
      "description": "Admin interface for managing base costs with search functionality, cost details modal, and program assignment tracking. Includes add/edit capabilities and financial summary cards",
      "status": "implemented"
    },
    {
      "id": "REQ-031",
      "title": "Enhanced Program Model Structure",
      "description": "Redesigned program models to align with Excel plan structure. Includes granular responsibilities with frequency-based calculations, buildout-specific role assignments, revenue-based contractor payments, and comprehensive financial tracking with yearly projections",
      "status": "implemented"
    },
    {
      "id": "REQ-033",
      "title": "Refactored Program Management Data Model",
      "description": "Implemented new architecture with simplified ProgramType (name/description only), reusable Role objects with default responsibilities, Responsibility model with frequency-based calculations, ProgramBuildout with versioning and cloning support, BaseCost model with frequency options, and ProgramInstance with contractor assignments and communication capabilities",
      "status": "implemented"
    },
    {
      "id": "REQ-032",
      "title": "Advanced Financial Modeling",
      "description": "Comprehensive financial modeling system with frequency-based calculations, revenue sharing for contractors, buildout overrides, and detailed profit analysis. Supports per-workshop, per-session, per-student, and per-year cost calculations with automatic yearly projections",
      "status": "implemented"
    },
    {
      "id": "REQ-034",
      "title": "Program Type Instance Relationship Fix",
      "description": "Fixed AttributeError in admin interface where ProgramType.instances was being accessed incorrectly. Updated views and templates to use the correct relationship path: ProgramType → ProgramBuildout → ProgramInstance. Added instance_count attributes to program types in views for template display",
      "status": "implemented"
    },
    {
      "id": "REQ-035",
      "title": "ProgramType Roles Relationship Cleanup",
      "description": "Removed references to non-existent program_type.roles relationship from templates and updated all role access to use the correct buildout.roles relationship. Updated buildout_list.html, program_type_buildouts.html, buildout_detail.html, and program_type_confirm_delete.html templates to use buildout.roles instead of program_type.roles. Confirmed ProgramType model is correctly designed with only name and description fields.",
      "status": "implemented"
    },
    {
      "id": "REQ-036",
      "title": "Program Type Management UI Cleanup",
      "description": "Removed 'Manage Roles' buttons and functionality from program type management pages since roles are now managed at the buildout level. Removed roles column from program type management table, updated statistics to show buildouts instead of roles, removed program_type_manage_roles URL, and updated buildout management to redirect role management to buildout edit page.",
      "status": "implemented"
    },
    {
      "id": "REQ-037",
      "title": "Cost Management UI Cleanup",
      "description": "Removed 'Manage Costs' buttons and 'Base Costs' column from program type management pages since costs are now managed at the buildout level. Updated buildout management to redirect cost management to buildout edit page with inline cost assignment formsets. Removed outdated program_type_manage_costs URL, view, and template.",
      "status": "implemented"
    },
    {
      "id": "REQ-038",
      "title": "Cost Management Functionality Fixes",
      "description": "Fixed non-functional edit and delete buttons in cost management interface. Replaced modal-based cost creation with dedicated create/edit pages. Added proper cost detail, edit, and delete views with corresponding templates. Fixed view modal overlay issues and improved user experience with proper navigation between cost management pages.",
      "status": "implemented"
    },
    {
      "id": "REQ-039",
      "title": "Excel-Like Role and Buildout System",
      "description": "Enhanced role and buildout system that mimics the TT After School Workshops Excel structure. Includes default role templates with responsibilities and hours per scope (per workshop concept, per new worker, per workshop, per session), buildout interface for adjusting hours, and comprehensive financial calculations matching the Excel formulas. Supports Facilitators, Operations Support, Service/Support, Business Consultant, and other role categories with frequency-based calculations.",
      "status": "implemented"
    },
    {
      "id": "REQ-040",
      "title": "Role Management Navigation Cleanup",
      "description": "Fixed confusing navigation paths in role management interface. Removed 'Manage Program Types' buttons and functionality from role detail and management pages since roles are now assigned to buildouts, not directly to program types. Fixed 'Assign Roles' button in buildout detail page to correctly link to buildout_assign_roles instead of role_management. Removed role_manage_program_types URL, view, and template. Updated role detail page to clarify that roles are managed through buildouts.",
      "status": "implemented"
    },
    {
      "id": "REQ-041",
      "title": "ProgramBuildout Model Field Restoration",
      "description": "Fixed AttributeError by restoring the new_workshop_concepts_per_year field to the ProgramBuildout model. This field was accidentally removed in migration 0011 but is still referenced in views and templates. Added the field back to the model with default value of 1, updated the form to include the field, and created migration 0012 to restore the field in the database.",
      "status": "implemented"
    },
    {
      "id": "REQ-042",
      "title": "Contractor Dashboard Role-Based Access",
      "description": "Updated contractor dashboard and related views to use the new role-based access model with InstanceRoleAssignment. Replaced references to the old instructor field with contractor_assignments relationship. Updated contractor_dashboard, view_registrations, and send_form_to_participants views to check for program assignments through the contractor_assignments relationship.",
      "status": "implemented"
    },
    {
      "id": "REQ-043",
      "title": "Buildout Form Checkbox Styling Fix",
      "description": "Fixed buildout creation form where Boolean fields (is_active and is_new_workshop) were appearing as empty text inputs instead of proper checkboxes. Updated form initialization to preserve Bootstrap checkbox styling for Boolean fields while maintaining form-control styling for other input types. Added missing new_workshop_concepts_per_year field to the form template.",
      "status": "implemented"
    },
    {
      "id": "REQ-044",
      "title": "Improved Instance Creation Workflow",
      "description": "Restructured instance creation workflow to follow logical hierarchy: Program Type → Buildout → Instance. Moved 'Create Instance' button from program type page to buildout detail page and program instance management page for better user workflow. Updated navigation to reflect the logical progression through the system.",
      "status": "implemented"
    },
    {
      "id": "REQ-045",
      "title": "Custom Program Instance Creation Form",
      "description": "Created custom program instance creation form that matches the site's design instead of redirecting to Django admin backend. Added AdminProgramInstanceForm with proper validation, custom template with Bootstrap styling, and integrated workflow for creating instances from both buildout detail pages and the general instance management page. Form includes smart defaults, validation, and contextual help information.",
      "status": "implemented"
    },
    {
      "id": "REQ-046",
      "title": "Contractor Assignment and Version Control System",
      "description": "Implemented new contractor assignment system where roles must be assigned to contractors when added to buildout versions. Created BuildoutRoleLine model with contractor, pay_type, pay_value, frequency_unit, frequency_count, and hours_per_frequency fields. Added ContractorRoleRate catalog for default contractor pay rates. Implemented version control with is_published flag and immutable published versions. All money fields moved from Role/Responsibility catalogs to version-specific lines. Added migration system to transition from legacy models to new structure.",
      "status": "implemented"
    },
    {
      "id": "REQ-047",
      "title": "Enhanced Role and Responsibility Management",
      "description": "Updated Role model to include default_frequency_unit and default_hours_per_frequency for seeding version lines. Renamed Responsibility.hours to default_hours to clarify its purpose as a template value. Updated all forms, views, and admin interfaces to work with new field names and model structure. Added comprehensive admin interface for new models including BuildoutRoleLine, BuildoutResponsibilityLine, and ContractorRoleRate.",
      "status": "implemented"
    },
    {
      "id": "REQ-048",
      "title": "Database Relationship Error Fixes",
      "description": "Fixed critical Django errors caused by outdated relationship references in admin interface views. Updated program_type_management and role_detail views to use correct relationship names (role_lines instead of role_assignments). Fixed missing buildout variable reference in BuildoutRoleLine.calculate_payout method. Verified all new model relationships work correctly with proper prefetch_related queries and database operations.",
      "status": "implemented"
    },
    {
      "id": "REQ-049",
      "title": "Terminology Standardization",
      "description": "Standardized all terminology throughout the system from 'Workshop' to 'Program' to maintain consistency. Updated models, views, templates, forms, and management commands to use 'program' terminology consistently. Changed field names, choice values, labels, and help text across all components.",
      "status": "implemented"
    },
    {
      "id": "REQ-050",
      "title": "Buildout Role Assignment Form JavaScript Fix",
      "description": "Fixed JavaScript validation logic in buildout assign roles form that was preventing proper form submission. Corrected event handling from button click to form submit event, fixed role ID extraction from contractor select elements, and improved validation flow. Confirmed backend form processing works correctly through automated testing. Form now properly validates contractor selection and submits successfully to create BuildoutRoleLine and BuildoutResponsibilityLine records.",
      "status": "implemented"
    },
    {
      "id": "REQ-051",
      "title": "Buildout Role Assignment Form Frontend Fix",
      "description": "Fixed frontend form submission issues by simplifying JavaScript validation, adding explicit form action attribute, and implementing fallback form submission. Removed complex contractor validation that was blocking form submission and added button click handler that forces form submission when validation passes. Form now submits successfully in all browsers and creates role assignments correctly.",
      "status": "implemented"
    },
    {
      "id": "REQ-052",
      "title": "Responsibility Form Submission Fix",
      "description": "Fixed responsibility form submission by removing the role field from the form fields list to prevent validation conflicts. The role is now set automatically based on the URL parameter instead of being included in form data. Added explicit form action attribute and debugging JavaScript to help diagnose frontend submission issues. Backend form processing confirmed working through automated testing.",
      "status": "implemented"
    },
    {
      "id": "REQ-053",
      "title": "Enhanced Contractor Availability System",
      "description": "Comprehensive contractor availability management system allowing contractors to set time blocks when they're available to work. Includes ContractorAvailability model with start/end datetime, status tracking (available, partially_booked, fully_booked, blocked), and notes. Supports automatic status updates based on bookings and remaining time calculations.",
      "status": "implemented"
    },
    {
      "id": "REQ-054",
      "title": "Flexible Program Offering System",
      "description": "AvailabilityProgram model that links contractor availability slots to specific programs they're willing to teach. Allows contractors to specify session duration, maximum sessions per time slot, and validates time constraints. Supports multiple program offerings within single availability windows based on time availability.",
      "status": "implemented"
    },
    {
      "id": "REQ-055",
      "title": "Session-Based Scheduling System",
      "description": "ProgramSession model for individual scheduled sessions within program instances. Replaces fixed program-level scheduling with flexible session-based approach. Includes start/end datetime, duration tracking, enrollment counts, capacity management, and status progression (scheduled, confirmed, in_progress, completed, cancelled).",
      "status": "implemented"
    },
    {
      "id": "REQ-056",
      "title": "Individual Session Booking System",
      "description": "SessionBooking model allowing parents to book children into specific sessions rather than entire programs. Includes booking status management (pending, confirmed, waitlisted, cancelled, no_show), parent notes, form responses, and automatic enrollment tracking. Supports 24-hour cancellation policy and waitlist management.",
      "status": "implemented"
    },
    {
      "id": "REQ-057",
      "title": "Program Scheduling Configuration",
      "description": "ProgramBuildoutScheduling model extending program buildouts with scheduling-specific settings. Includes default/min/max session durations, maximum students per session, advance booking requirements, and booking time constraints. Provides flexible configuration for different program types and scheduling needs.",
      "status": "implemented"
    },
    {
      "id": "REQ-058",
      "title": "Contractor Availability Management Interface",
      "description": "Comprehensive web interface for contractors to manage their availability including: availability list/create/edit views, program offering management within time slots, time validation and conflict checking, and remaining hours calculation. Includes forms with datetime inputs, duration validation, and program assignment filtering.",
      "status": "implemented"
    },
    {
      "id": "REQ-059",
      "title": "Parent Session Booking Interface",
      "description": "Parent-facing interface for browsing and booking available sessions. Features: available sessions list grouped by program type, session booking form with child selection, booking management dashboard, cancellation system with policy enforcement, and real-time availability checking. Integrates with existing child management system.",
      "status": "implemented"
    },
    {
      "id": "REQ-060",
      "title": "Intelligent Time Slot Management",
      "description": "Advanced scheduling logic that manages time slots dynamically based on session durations and availability. Supports: automatic calculation of remaining hours in availability slots, validation that sessions fit within availability windows, prevention of overbooking, flexible session durations (e.g., 2-hour slot can fit one 2-hour session or two 1-hour sessions), and real-time status updates.",
      "status": "implemented"
    },
    {
      "id": "REQ-061",
      "title": "Enhanced Scheduling Forms and Validation",
      "description": "Comprehensive form system for scheduling including: ContractorAvailabilityForm with datetime validation and minimum duration checking, AvailabilityProgramForm with contractor filtering and session constraints, SessionBookingForm for parent notes and requests, ProgramSessionForm with availability window validation, and ProgramBuildoutSchedulingForm for program-specific scheduling configuration.",
      "status": "implemented"
    },
    {
      "id": "REQ-062",
      "title": "Holiday Management System",
      "description": "Comprehensive holiday management system with Holiday model for system-wide holidays, admin interface for holiday management, and automated population of US federal holidays for 5 years. Includes recurring holiday support and integration with contractor availability exclusion system.",
      "status": "implemented"
    },
    {
      "id": "REQ-063",
      "title": "Holiday-Aware Availability Creation",
      "description": "Enhanced contractor availability form with 'except for holidays' option for recurring weekly availability. When selected, automatically excludes system holidays from recurring availability creation, preventing contractors from being scheduled on holidays they don't want to work.",
      "status": "implemented"
    },
    {
      "id": "REQ-064",
      "title": "Contractor Day-Off Request System",
      "description": "Complete day-off request workflow with ContractorDayOffRequest model supporting date ranges (start_date to end_date), contractor request forms with date range selection, admin approval interface, and conflict detection. Automatically checks for existing sessions and bookings across date ranges when day-off is requested, alerts admins to conflicts, and blocks availability for approved date ranges. Supports both single-day and multi-day time-off requests.",
      "status": "implemented"
    },
    {
      "id": "REQ-065",
      "title": "Intelligent Session Availability Filtering",
      "description": "Advanced session availability logic that prevents booking conflicts by checking contractor time overlaps. When a contractor is booked for a session, other sessions for that contractor during overlapping times are automatically hidden from parents. Supports hour-by-hour granularity and multiple contractor scenarios.",
      "status": "implemented"
    },
    {
      "id": "REQ-066",
      "title": "Enhanced Parent Session Browsing",
      "description": "Improved parent interface for browsing available sessions with dual view options (by program type and by date), real-time availability counts, contractor information display, and intelligent filtering that shows only truly bookable sessions. Includes session duration, capacity, and booking status indicators.",
      "status": "implemented"
    },
    {
      "id": "REQ-067",
      "title": "Contractor Assignment Automation",
      "description": "Automated contractor assignment system where contractors assigned to buildouts via BuildoutRoleLine are automatically assigned to program instances when created by admins. Creates InstanceRoleAssignment records with buildout role line values as defaults for pay rates and hours. Eliminates manual contractor assignment step for program instances.",
      "status": "implemented"
    },
    {
      "id": "REQ-068",
      "title": "Contractor-Specific Buildout Access Control",
      "description": "Role-based access control for buildouts where contractors can only view buildouts they're assigned to via BuildoutRoleLine. Contractors see only their assigned buildout instances through InstanceRoleAssignment relationships. Admin users maintain full access to all buildouts and instances. Updated buildout_list and buildout_detail views with contractor filtering.",
      "status": "implemented"
    },
    {
      "id": "REQ-069",
      "title": "Contractor Instance Scheduling Interface",
      "description": "Dedicated contractor interface for scheduling availability for assigned program instances. Includes contractor_instance_schedule view with role assignment display, availability management integration, and scheduling guidelines. Contractors can create availability, manage sessions, but cannot edit instance details (dates, location, capacity).",
      "status": "implemented"
    },
    {
      "id": "REQ-070",
      "title": "Contractor Permission Restrictions",
      "description": "Comprehensive permission system preventing contractors from editing buildout details, financial information, instance parameters, or role assignments. Contractors have read-only access to buildout structure and can only manage their availability and scheduling. Financial data and admin functions are hidden from contractor views.",
      "status": "implemented"
    },
    {
      "id": "REQ-071",
      "title": "Multiple Role Assignment Fix",
      "description": "Fixed buildout role assignment system to allow contractors to be assigned to multiple roles within the same buildout. Updated unique_together constraint from ['buildout', 'role'] to ['buildout', 'role', 'contractor'] in BuildoutRoleLine model, enabling flexible role assignments while preventing duplicate contractor-role combinations.",
      "status": "implemented"
    },
    {
      "id": "REQ-072",
      "title": "Role Parent Visibility Control",
      "description": "Added visible_to_parents boolean field to Role model allowing administrators to control which roles and assigned contractors are visible to parents in program listings, availability displays, and catalog views. Roles marked as not visible to parents will be hidden from public-facing interfaces.",
      "status": "implemented"
    },
    {
      "id": "REQ-073",
      "title": "Public Program Catalog",
      "description": "Created comprehensive program catalog interface accessible to all authenticated users. Displays available program types with active instances, session information, enrollment status, and visible contractor assignments. Includes role-based views for parents and contractors with appropriate action buttons and information display.",
      "status": "implemented"
    },
    {
      "id": "REQ-074",
      "title": "Program Request System",
      "description": "Implemented program request functionality allowing parents to request specific programs and contractors to request buildout creation opportunities. Includes ProgramRequest model with different request types, comprehensive form validation, and integration with existing contact management system for admin tracking.",
      "status": "implemented"
    },
    {
      "id": "REQ-075",
      "title": "Integrated Contact Management",
      "description": "Program requests automatically create corresponding Contact records in the communications system, ensuring all user inquiries (general contacts and program requests) are managed through a unified admin interface. Includes detailed request information formatted for easy admin review.",
      "status": "implemented"
    },
    {
      "id": "REQ-076",
      "title": "Contractor Onboarding and Contract Flow",
      "description": "Implement contractor onboarding with NDA and W-9, ProgramBuildout status states (new, in_progress, ready, awaiting_signatures, active, on_hold, cancelled), DocuSign-backed contract flow that triggers when a buildout is ready and assigned. On signature completion, persist signed PDF and activate buildout. Gate contractor dashboard on onboarding completion.",
      "status": "implemented"
    },
    {
      "id": "REQ-077",
      "title": "Onboarding Gates, Contracts Panel, and W-9 DocuSign",
      "description": "Enforce NDA+W-9 gates across assignment and scheduling; add contractor dashboard onboarding banner; add Contracts panel on buildout detail; store admin_note_url on Contract; add service-layer assignment guard; add optional DocuSign W-9 flow with webhook storing PDF; configure private storage guidance in SECURITY.md.",
      "status": "implemented"
    },
    {
      "id": "REQ-078",
      "title": "Role Detail Responsibility Edit Fix",
      "description": "Fixed non-functional edit icon in role detail responsibilities table by linking the pencil action to the responsibility_edit route so responsibilities can be edited directly from the role detail page.",
      "status": "implemented"
    },
    {
      "id": "REQ-079",
      "title": "Remove Role-Level Default Hourly Rate UI",
      "description": "Removed default hourly rate column and related statistics from role management UI to avoid implying role-wide rates. System relies on contractor-specific rates via ContractorRoleRate; Role model has no hourly_rate field.",
      "status": "implemented"
    },
    {
      "id": "REQ-080",
      "title": "Notes System with Role-Based Visibility",
      "description": "Internal Notes feature allowing Facilitators to create/read/edit their own notes on Students, Admins to create/read/edit notes on Students and Parents and manage all notes, and Parents to view only notes flagged Public that are about their own child or themselves. Includes StudentNote and ParentNote models with visibility controls, HTMX-powered UI with Bootstrap styling, comprehensive permission system, and integration into existing Student and Parent detail pages.",
      "status": "implemented"
    },
    {
      "id": "REQ-081",
      "title": "Accurate Dashboard User Metrics",
      "description": "Dashboard user statistics must reflect actual database counts instead of hardcoded values. Includes total users (User.objects.count()), active users (User.objects.filter(is_active=True).count()), and new users today (User.objects.filter(date_joined__date=today).count()) calculated in real-time from the database.",
      "status": "implemented"
    },
    {
      "id": "REQ-082",
      "title": "Role-Based User Assignment System",
      "description": "System to properly assign users to roles through a dedicated RoleAssignment model. Administrators can assign/unassign users to specific roles through the role management interface. This replaces the previous incomplete system and enables proper tracking of which users are qualified for specific roles.",
      "status": "implemented"
    },
    {
      "id": "REQ-083",
      "title": "Contractor Filtering by Role Assignment and Onboarding",
      "description": "Buildout contractor selection must only show contractors who are both assigned to the specific role AND have completed their onboarding (NDA signed and W-9 uploaded). This ensures only qualified and properly onboarded contractors appear in buildout role assignment dropdowns, improving compliance and reducing administrative errors.",
      "status": "implemented"
    },
    {
      "id": "REQ-084",
      "title": "Role Management User Count Display",
      "description": "Role Management table Users column displays the actual number of assigned users instead of 'via groups' placeholder. Shows real-time count of users assigned to each role through the RoleAssignment model, providing administrators with accurate user assignment visibility.",
      "status": "implemented"
    },
    {
      "id": "REQ-085",
      "title": "Enhanced Cost and Location Management System",
      "description": "Comprehensive cost and location management system with per-child frequency option, buildout-specific overrides, and historical data integrity. Includes PER_CHILD frequency option for all cost calculations, Location model with default rates and buildout integration, override capabilities allowing custom rates and frequencies per buildout, and captured final values in buildout data ensuring historical accuracy when defaults change. Features immediate calculated value display, improved UX for cost assignment, and complete location management interface with capacity, features, and contact information tracking.",
      "status": "implemented"
    },
    {
      "id": "REQ-086",
      "title": "Enhanced Buildout Editor with Dynamic Cost and Location Management",
      "description": "Improved buildout editor interface featuring dynamic cost and location assignment with user-friendly controls. Includes inline formsets for cost and location management with override capabilities, dynamic add/remove functionality using JavaScript templates, real-time display of default rates and frequencies, improved UI with better organization and visual hierarchy, and comprehensive validation for all form fields. Features Bootstrap-styled tables with proper responsive design and intuitive user experience for managing complex buildout configurations.",
      "status": "implemented"
    },
    {
      "id": "REQ-087",
      "title": "Separate Cost and Location Management Workflow",
      "description": "Enhanced buildout workflow with separate cost and location management screens similar to role assignment. Replaced inline formsets with dedicated assignment pages that load default values from cost/location catalogs and allow customization per buildout. Updated models to use actual rate/frequency fields instead of override fields, providing clearer user experience where defaults are loaded and can be adjusted. Removed yearly cost columns from management tables to focus on rate and frequency configuration. Features intuitive checkbox-based selection with expandable configuration sections.",
      "status": "implemented"
    },
    {
      "id": "REQ-088",
      "title": "Excel-Like Financial Analysis Dashboard",
      "description": "Comprehensive buildout financial analysis interface that mirrors Excel functionality with detailed parameter display, revenue calculations, staff cost breakdown with hours and percentage analysis, overhead cost aggregation including base costs and location costs, and profit margin calculations. Features buildout parameter cards showing facilitators, programs per year, students per program, sessions per program, and fee structure. Includes detailed staff cost table with cost per hour, cost per program, yearly costs, total hours, revenue percentage, and hours percentage. Overhead section combines base costs and location costs with rate, frequency, and percentage breakdowns. Final profit summary shows total revenue, costs, profit, and margin with color-coded indicators.",
      "status": "implemented"
    },
    {
      "id": "REQ-089",
      "title": "Individual Assignment Management System",
      "description": "Enhanced buildout assignment management system that prevents data loss by using individual add/remove actions instead of clearing all assignments. Features separate 'Currently Assigned' and 'Available to Add' sections similar to user role management interface, individual role-contractor assignment with pay configuration, individual location assignment with rate and frequency settings, and preservation of existing assignments when adding new ones. Includes dedicated management views for roles and locations with proper form validation and user feedback.",
      "status": "implemented"
    },
    {
      "id": "REQ-090",
      "title": "In-App NDA Signing System",
      "description": "Comprehensive in-app NDA signing system replacing DocuSign integration with digital signature capture, terms and conditions display, and comprehensive audit logging. Features include: full NDA text display with scrollable content, digital signature pad with mouse/touch support using SignaturePad.js, signature validation and form submission, checkbox agreement requirement, comprehensive logging of signature data, user information, IP address, timestamp, and user agent, NDASignature model for storing signature data and audit information, and integration with contractor onboarding flow.",
      "status": "implemented"
    },
    {
      "id": "REQ-091",
      "title": "Admin Document Approval System",
      "description": "Comprehensive admin approval system for contractor NDA and W-9 documents with full management interface. Features include: admin approval fields for NDA and W-9 with approval tracking (who approved, when approved), contractor document management interface with search and filtering capabilities, individual document detail views with signature display and file download, admin approval/reset functionality with confirmation dialogs, updated onboarding logic requiring both document completion AND admin approval, enhanced user management interface showing NDA/W-9 status, and complete audit trail for all admin actions.",
      "status": "implemented"
    },
    {
      "id": "REQ-092",
      "title": "Comprehensive Parent Landing Page",
      "description": "Enhanced parent landing page with five distinct sections: Your Kids (child management with cards and empty states), Current Sign-ups (enrollment status with dates and actions), Running & Pending Programs (available instances with capacity and facilitator info), Available Programs to Inquire (program type inquiry system with grade filtering), and Facilitators (directory with program visibility toggles). Features progressive loading, role-based access control, mobile-first responsive design, comprehensive empty/loading/error states, AJAX-powered inquiry forms, and duplicate prevention.",
      "status": "implemented"
    },
    {
      "id": "REQ-093",
      "title": "Email Case-Insensitive Authentication",
      "description": "User authentication system handles email addresses in a case-insensitive manner during user lookup while preserving the original email format for display. When users log in with different capitalizations (e.g., Test@Example.Com, test@example.com, TEST@EXAMPLE.COM), the system finds the same user account and maintains their permissions and roles. Email addresses are stored as originally entered but lookup uses case-insensitive comparison to prevent duplicate accounts and security issues. Includes comprehensive test coverage validating case-insensitive login behavior.",
      "status": "implemented"
    },
    {
      "id": "REQ-094",
      "title": "Role-Based Login Redirect System",
      "description": "Automatic role-based redirect system that directs users to their appropriate dashboard immediately after successful login. Parents with the 'Parent' role are automatically redirected to the Parent Landing Page (/programs/parent/dashboard/) instead of the general dashboard. System includes a utility function get_user_redirect_url() for determining appropriate redirect URLs based on user roles, a role_based_redirect view for handling Django's LOGIN_REDIRECT_URL, and extensible architecture for adding redirects for other roles (contractors, admins, etc.). Both custom email verification login flow and standard Django authentication paths are supported.",
      "status": "implemented"
    },
    {
      "id": "REQ-095",
      "title": "Multi-Child Program Enrollment System",
      "description": "Fixed program registration system to properly support parents enrolling multiple children in the same program instance. Corrected registration logic that was incorrectly preventing parents from enrolling more than one child per program by checking for specific child registration instead of any child from the parent. Updated program instance detail view to show existing registrations per child and allow registration of additional children. Enhanced user interface to display which children are already registered and only show unregistered children in the enrollment form. System now properly supports families with multiple children enrolling in the same programs.",
      "status": "implemented"
    },
    {
      "id": "REQ-096",
      "title": "Contact → One-Step Account + Message → Parent Dashboard System",
      "description": "Comprehensive contact and messaging system that allows both authenticated and anonymous users to send messages to staff. For authenticated users, provides a compose form that creates conversations and messages. For anonymous users, implements a one-step account creation and message flow that creates a user account, logs them in immediately, sends password setup instructions, and creates their first message. Includes a complete parent dashboard integration with Messages section showing recent conversations, message history, and reply functionality. Features conversation threading, status management (open/pending/closed), role-based messaging (parent/staff), admin notification system with internal alerts and parent acknowledgments, security measures including honeypot protection and rate limiting, comprehensive email templates for notifications and password setup, and complete test coverage. Integrates seamlessly with existing parent dashboard and provides HTMX-powered UI for dynamic interactions.",
      "status": "implemented"
    },
    {
      "id": "REQ-097",
      "title": "Navigation Links Fix",
      "description": "Fix logo and Home navigation links in the header to properly navigate to the homepage instead of the dashboard. Both the Dynamic Discoveries logo and the Home navigation link should point to the home URL pattern.",
      "status": "implemented"
    },
    {
      "id": "REQ-USER-MGMT-001",
      "title": "User Deactivation and Deletion in Admin Dashboard",
      "description": "Administrators must be able to deactivate and delete users from the admin dashboard. User deactivation toggles the is_active status, while user deletion permanently removes the user and related data. Superusers and the current user cannot be deleted for security reasons.",
      "status": "implemented",
      "priority": "high",
      "category": "user_management",
      "last_updated": "2025-01-27T12:50:00.000000"
    },
    {
      "id": "REQ-098",
      "title": "Contact Form Template Fix",
      "description": "Fix contact entry view to use the proper contact form template instead of the test template. The contact form should display the actual form for anonymous users (quick form) and authenticated users (compose form) rather than showing test content.",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-001-038",
      "title": "Fix contact form redirect after account creation",
      "description": "After submitting the contact form and creating a new account, users should be properly redirected to the parent dashboard instead of seeing dashboard content within the contact page. This was caused by HTMX not properly handling redirect responses.",
      "category": "bug_fix",
      "priority": "high",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-001-039",
      "title": "Replace dashboard scroll with pulse animation for messages section",
      "description": "When users are redirected to the dashboard with ?show=messages parameter, instead of scrolling down to the messages section (which hides the top of the page), use a pulse animation with shadow effect to draw attention to the messages section while keeping the full page visible.",
      "category": "ui_improvement",
      "priority": "medium",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-001-040",
      "title": "Contact Form Authentication Messaging Fix",
      "description": "Updated contact form Quick Start text and email flow to reflect passwordless authentication system using email verification codes instead of password setup emails",
      "category": "bug_fix",
      "priority": "high",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-001-041",
      "title": "Contact Form Captcha Security Enhancement",
      "description": "Added captcha protection to contact form for additional security against bot submissions, matching the security level of login and signup forms",
      "category": "security",
      "priority": "high",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-001-042",
      "title": "Contact Form Auto-Login Security Fix",
      "description": "Removed automatic login from contact form submission. New users created through contact form must now verify their email address through the standard login process with captcha and verification code, ensuring consistent security across all authentication paths",
      "category": "security",
      "priority": "critical",
      "status": "implemented"
    },
    {
      "id": "unified_communication_system",
      "title": "Unified Communication System",
      "description": "Logged-in users sending messages through contact form or compose message should create both Contact records (for admin tracking) and Conversation records (for user messaging). This ensures messages appear in both the admin panel contact inquiries and the user's message dashboard.",
      "category": "communications",
      "priority": "high",
      "status": "implemented"
    },
    {
      "id": "REQ-2025-01-27-002",
      "title": "Contractor Role Assignment Fix",
      "description": "Fixed issue where user jon.nellson@gmail.com was missing the Contractor role, preventing access to contractor dashboard and navigation menu. Added Contractor role to user account to restore full contractor functionality.",
      "status": "implemented",
      "priority": "high",
      "category": "bug_fix",
      "created_date": "2025-01-27T23:15:00.000000",
      "updated_date": "2025-01-27T23:15:00.000000",
      "implementation_notes": "User had Consultant and Facilitators roles but was missing Contractor role. Added Contractor role via Django shell command. Verified contractor dashboard and navigation menu now display correctly.",
      "acceptance_criteria": [
        "User jon.nellson@gmail.com can access contractor dashboard",
        "Contractor Tools navigation menu is visible",
        "All contractor-specific features are accessible"
      ]
    },
    {
      "id": "REQ-2025-10-09-001",
      "title": "Contractor Availability Calendar & Archiving",
      "description": "Comprehensive contractor availability management system with server-rendered calendar views, archiving functionality, and parent-facing availability discovery interface. Includes list view with status grouping (Active/Future/Past), month-view calendar with HTMX-powered navigation, program instance filtering for contractors, facilitator and program type filtering for parents, automatic inactivation of past entries, per-row and bulk archiving capabilities, and integrated parent dashboard calendar showing all contractors' availability with sign-up links.",
      "status": "implemented",
      "priority": "high",
      "category": "feature",
      "created_date": "2025-10-09T00:00:00.000000",
      "updated_date": "2025-10-09T00:00:00.000000",
      "implementation_notes": "Implemented using Django templates with HTMX for dynamic updates. No JavaScript frameworks. Server-side calendar rendering using Python's calendar module. Bootstrap styling for responsive design. Added is_active and is_archived fields to ContractorAvailability model. Created calendar utility module with month grid generation and availability aggregation functions.",
      "acceptance_criteria": [
        "Contractor page shows grouped list (Active, Future, Past) with clear status badges",
        "Contractor calendar displays month view with availability chips showing time and program",
        "Contractor can filter by Program Instance with multi-select dropdown",
        "Contractor month navigation (Prev, Today, Next) works via HTMX",
        "Past availability entries are automatically marked as inactive on page load",
        "Per-row archive button works for individual past entries",
        "Bulk archive all past button archives all past entries at once",
        "Parent dashboard shows availability calendar with all contractors",
        "Parent can filter by Facilitator (multi-select) and Program Type (multi-select)",
        "Parent calendar hides past entries by default",
        "Calendar chips on parent view show facilitator name and link to sign-up",
        "All HTMX partials load correctly without full page refresh",
        "URL query parameters maintain state for shareable links",
        "Mobile responsive design with stacked layout on narrow screens"
      ],
      "technical_details": {
        "models": {
          "ContractorAvailability": {
            "new_fields": [
              "is_active (BooleanField)",
              "is_archived (BooleanField)"
            ]
          }
        },
        "views": [
          "contractor_availability_list - Main page with filters and initial load",
          "contractor_availability_list_partial - HTMX partial returning grouped list",
          "contractor_availability_calendar_partial - HTMX partial returning month calendar",
          "contractor_availability_archive - POST endpoint for archiving",
          "parent_dashboard - Updated with calendar filters",
          "parent_dashboard_calendar_partial - HTMX partial for parent calendar view"
        ],
        "urls": [
          "/programs/contractor/availability/ - Main contractor availability page",
          "/programs/contractor/availability/list-partial/ - List HTMX endpoint",
          "/programs/contractor/availability/calendar-partial/ - Calendar HTMX endpoint",
          "/programs/contractor/availability/archive/ - Archive POST endpoint",
          "/programs/parent/dashboard/ - Parent dashboard with calendar",
          "/programs/parent/dashboard/calendar-partial/ - Parent calendar HTMX endpoint"
        ],
        "templates": [
          "programs/contractor_availability_list.html - Main contractor page",
          "programs/partials/_availability_list.html - Grouped list partial",
          "programs/partials/_availability_calendar.html - Shared calendar partial",
          "programs/parent_home.html - Updated with calendar section"
        ],
        "utilities": [
          "programs/utils/calendar_utils.py - Calendar grid generation and aggregation"
        ],
        "tests": [
          "ContractorAvailabilityArchivingTest - Archive and inactivation tests",
          "ContractorAvailabilityStatusBucketingTest - Status grouping tests",
          "ContractorAvailabilityFilteringTest - Program buildout filtering tests",
          "CalendarUtilsTest - Calendar utility function tests",
          "ParentDashboardCalendarTest - Parent filtering and visibility tests"
        ]
      },
      "dependencies": [
        "Django 4.2+",
        "HTMX 1.9+",
        "Bootstrap 5 (CSS only)",
        "Python calendar module",
        "Existing ContractorAvailability, AvailabilityProgram, ProgramBuildout models"
      ],
      "security": {
        "authentication": "login_required decorator on all views",
        "authorization": "Contractor views check user_is_contractor or user_is_admin, Parent views check user_is_parent",
        "data_isolation": "Contractors only see their own availability, Parents see all non-archived future/active availability"
      },
      "performance": {
        "query_optimization": "Uses select_related and prefetch_related for efficient database queries",
        "calendar_scope": "Limits queries to visible month +/- 1 week buffer",
        "htmx_partials": "Only updates necessary DOM sections, avoiding full page reloads"
      }
    },
    {
      "id": "REQ-099",
      "title": "Admin View As (Role Preview & Safe User Impersonation)",
      "description": "Comprehensive admin 'View As' feature enabling authenticated admins to switch application context for role preview (viewing site as different roles they have) and safe user impersonation (previewing site as another user with read-only mode by default). Includes session-based role switching with automatic redirect to role-appropriate landing pages, user impersonation with audit logging, read-only enforcement, role switcher dropdown UI, impersonation banner, permission checks preventing privilege escalation, comprehensive impersonation audit logs with IP/UA tracking, admin user management integration with impersonation modal, and full test coverage. All impersonation events are logged in ImpersonationLog model with admin/target users, timestamps, readonly flag, reason notes, and session metadata.",
      "status": "implemented",
      "priority": "high",
      "category": "admin_tools",
      "created_date": "2025-10-21T00:00:00.000000",
      "updated_date": "2025-10-21T00:00:00.000000",
      "implementation_notes": "Implemented using Django 5.x with HTMX and Bootstrap. No JavaScript frameworks. Context processor provides effective_role and impersonation context to all templates. RoleRequiredMixin updated to consider effective_role during access checks. Read-only enforcement via readonly_enforcement_required decorator. Impersonation actions integrated into user management interface with Bootstrap modal. All audit logs stored in new audit app with ImpersonationLog model. Role switching redirects to appropriate landing page for selected role.",
      "acceptance_criteria": [
        "Header shows 'Viewing as: <Role>' badge when role preview is active",
        "Persistent banner appears with target identity during impersonation",
        "All role-gated views respect effective_role for presentation and routing",
        "Read-only enforcement blocks writes during impersonation with helpful message",
        "Impersonation events fully audited (start/stop, who, when, target)",
        "No JavaScript frameworks; HTMX + Bootstrap only",
        "Zero or minimal middleware additions",
        "All tests pass with comprehensive coverage",
        "Role switching redirects to appropriate dashboard for that role"
      ]
    },
    {
      "id": "REQ-100",
      "title": "Mandatory Requirements and Testing Workflow",
      "description": "Automated workflow enforcement ensuring every code change is tracked in site_requirements.json and validated with corresponding tests in tests/test_requirements.py. Before any feature work or bug fix, a requirement entry must be created or updated. After implementation, tests must be added or updated to validate the requirement. Full regression testing with 'python manage.py test tests.test_requirements' must run before task completion. This workflow is mandatory for all code changes to maintain comprehensive requirements tracking and test coverage.",
      "status": "implemented",
      "priority": "critical",
      "category": "development_workflow",
      "created_date": "2025-10-21T00:00:00.000000",
      "updated_date": "2025-10-21T00:00:00.000000",
      "implementation_notes": "Implemented through .cursorrules configuration file with explicit workflow steps: (1) Update site_requirements.json, (2) Implement feature/fix, (3) Update tests/test_requirements.py, (4) Run test suite, (5) Report results. Skip conditions only for purely informational queries with no code changes.",
      "acceptance_criteria": [
        "Every code change has a corresponding requirement entry",
        "Every requirement has a corresponding test case",
        "Test suite runs automatically after each implementation",
        "Test results are reported before task completion",
        "Workflow is enforced through AI assistant configuration",
        "No code changes bypass the requirements tracking system"
      ]
    },
    {
      "id": "REQ-101",
      "title": "Recurring Weekly Availability Creation Fix",
      "description": "Fixed bug where recurring weekly availability only created a single calendar entry instead of multiple entries for all selected weekdays until the specified end date. The contractor availability creation view now properly passes the contractor to the form instance before saving, and calls form.save(commit=True) to ensure all recurring instances are created and saved to the database. This fix applies to all availability types: single date, date range, and recurring weekly patterns with optional holiday exclusion.",
      "status": "implemented",
      "priority": "high",
      "category": "bug_fix",
      "created_date": "2025-10-21T00:00:00.000000",
      "updated_date": "2025-10-21T00:00:00.000000",
      "acceptance_criteria": [
        "Recurring weekly availability creates multiple entries for all selected days",
        "All entries appear on the calendar between start and end dates",
        "Holiday exclusion works correctly when enabled",
        "Single date and date range availability types still work correctly",
        "Created availability entries have correct contractor assignment"
      ]
    },
    {
      "id": "REQ-102",
      "title": "Contractor Availability Rules with Dynamic Occurrences",
      "description": "Replace one-row-per-day availability model with rule-based system that generates occurrences dynamically for calendar views. Support two input modes: recurring rules (e.g., 'Every Mon/Wed, 2:30-5:00 PM from Sep 1 to Dec 20') and date range rules (e.g., 'Daily from Jun 10-Jun 14, 9:00-12:00'). Calendar renders occurrences on-the-fly for visible date range without persisting daily instances. Contractors can attach offered programs (one or many) during create/edit. System normalizes existing data by keeping legacy rows but migrating/backfilling into rules where safe to avoid data loss. Includes AvailabilityRule model with fields for contractor, title, kind (WEEKLY_RECURRING/DATE_RANGE), time window (start_time/end_time), date bounds (date_start/date_end inclusive), weekly pattern (booleans/bitmask for mon-sun), timezone (IANA string), is_active flag, notes, and M2M relation to programs_offered. AvailabilityException model supports SKIP and TIME_OVERRIDE for exclusions. Occurrence generator utility computes occurrences for visible date range by expanding WEEKLY_RECURRING dates within bounds matching checked weekdays, generating DATE_RANGE occurrences for every day in span, and applying exceptions (SKIP drops day, TIME_OVERRIDE swaps times). Views include GET/POST endpoints for availability index/dashboard showing compact rules list with controls (View/Edit, Toggle Active, Archive, Delete) and calendar (month/week toggle) with dynamic occurrences from rules, create/edit forms for rules with kind selection, program assignment multi-select, validation, and exception management via HTMX partials. Templates use Django templates + Bootstrap with server-rendered calendar grid (7 columns Mon-Sun, 5-6 rows) navigated with HTMX, rules list ordered by is_active then date_start, and HTMX partials for calendar month/week, rules list, and exceptions. Program assignment allows selecting zero or more ProgramInstances to mark as offered during availability window at create-time or via View/Edit. Legacy data migration via management command analyzes per-day rows, groups by contractor/time/day-of-week patterns, creates WEEKLY_RECURRING rules for consistent patterns, DATE_RANGE rules for consecutive days, and preserves audit trail with dry-run mode. System respects existing time-off objects, detects/warns about overlapping rules, supports archiving (is_active=False), and enforces onboarding gates (NDA/W-9) before scheduling. Testing covers rule validation, occurrence generation across month boundaries and DST, exceptions, time-off suppression, overlap detection, program assignment, legacy migration, permissions, and HTMX endpoints. Architecture adheres to Django + HTMX + Bootstrap constraints with function-based views, minimal dependencies, and stdlib recurrence implementation.",
      "status": "implemented",
      "priority": "high",
      "category": "feature",
      "created_date": "2025-10-21T00:00:00.000000",
      "updated_date": "2025-10-21T00:00:00.000000",
      "acceptance_criteria": [
        "Creating 'Every Tue/Thu 3-6 PM from Oct 1-Nov 30' saves ONE rule and displays occurrences on all matching days; no per-day rows created",
        "Creating 'Daily from Jun 10-Jun 14, 9-12' saves ONE rule and displays five occurrences",
        "Can select programs at create time and see them attached on rule and in each rendered occurrence",
        "Month/week navigation is instant via HTMX without full-page reloads",
        "Archiving moves rule to inactive/archived list and removes future occurrences from calendar",
        "Legacy daily entries no longer clutter UI; data remains accessible to admins",
        "Calendar cells use semantic headings for dates; occurrences presented as list items with aria-labels",
        "Forms have clear helper text; disabled weekday checkboxes when Date Range selected via HTMX swap",
        "Occurrence generator only computes for visible range (current month/week); no precomputation",
        "Rules list shows title, date bounds, weekdays (if recurring), time window, active/inactive, program count",
        "View/Edit allows managing linked programs and exceptions (add skip/override rows)",
        "Migration command has dry-run and commit modes with id mapping and no data loss",
        "Time-off suppresses occurrences before display; overlaps show visual 'conflict' badge",
        "Only contractor and admin can create/edit their rules; onboarding gates enforced",
        "Tests validate rule creation, occurrence generation, exceptions, time-off, overlaps, program assignment, migration, permissions, HTMX"
      ],
      "implementation_notes": "Implemented using Django 5.x with HTMX and Bootstrap CSS-only. Function-based views throughout. Occurrence generator uses stdlib datetime/calendar only. No external recurrence libraries. Server-side calendar rendering. HTMX partials for dynamic calendar navigation and form updates. Legacy ContractorAvailability entries marked with legacy=True field and hidden from contractor UI after migration. Timezone handling with IANA strings stored per rule. Validation ensures start_time < end_time, date_start <= date_end, and weekly recurring has at least one weekday. Exception model supports both SKIP and TIME_OVERRIDE types with optional override times. Program assignment via M2M to ProgramInstance. Migration command uses pattern detection to consolidate rows into rules with full audit trail.",
      "technical_details": {
        "models": {
          "AvailabilityRule": {
            "fields": [
              "contractor (FK to User)",
              "title (CharField)",
              "kind (choices: WEEKLY_RECURRING, DATE_RANGE)",
              "start_time (TimeField)",
              "end_time (TimeField)",
              "date_start (DateField)",
              "date_end (DateField, inclusive)",
              "weekdays_monday through weekdays_sunday (BooleanField for weekly pattern)",
              "timezone (CharField, IANA string)",
              "is_active (BooleanField)",
              "notes (TextField, optional)",
              "programs_offered (M2M to ProgramInstance)"
            ],
            "constraints": [
              "start_time < end_time",
              "date_start <= date_end",
              "For WEEKLY_RECURRING: at least one weekday selected"
            ]
          },
          "AvailabilityException": {
            "fields": [
              "rule (FK to AvailabilityRule)",
              "date (DateField)",
              "type (choices: SKIP, TIME_OVERRIDE)",
              "override_start_time (TimeField, optional for TIME_OVERRIDE)",
              "override_end_time (TimeField, optional for TIME_OVERRIDE)",
              "note (TextField, optional)"
            ]
          },
          "ContractorAvailability": {
            "new_fields": [
              "legacy (BooleanField, default=False, marks old per-day entries)"
            ]
          }
        },
        "utilities": [
          "programs/availability/utils.py - occurrence_generator(rules, date_range, exceptions) returns list of computed occurrences"
        ],
        "views": [
          "availability_index - GET list/dashboard with rules and calendar",
          "availability_create - GET/POST rule creation form",
          "availability_edit - GET/POST rule edit form with exceptions",
          "availability_toggle - POST toggle is_active",
          "availability_archive - POST set is_active=False",
          "availability_delete - POST delete rule",
          "availability_calendar_partial - HTMX endpoint for calendar navigation",
          "availability_exceptions_partial - HTMX endpoint for exception management"
        ],
        "templates": [
          "programs/availability/index.html - Main page",
          "programs/availability/_calendar_month.html - Month calendar partial",
          "programs/availability/_calendar_week.html - Week calendar partial (optional)",
          "programs/availability/_rules_list.html - Rules list partial",
          "programs/availability/_exceptions_list.html - Exceptions list partial",
          "programs/availability/form.html - Create/edit form"
        ],
        "management_commands": [
          "migrate_legacy_availability - Analyze and consolidate per-day entries into rules"
        ]
      }
    },
    {
      "id": "REQ-997",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-995",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-996",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-994",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-103",
      "title": "Contractor Availability Filter Clearing and Delete Functionality",
      "description": "Enhanced contractor availability management with ability to clear applied filters and delete availability entries. Includes 'Clear Filters' button to reset program buildout filters and show all availability, and delete functionality for availability entries with proper confirmation dialogs. Delete is available for future and past entries via detail page, while archive remains for bulk past entry management.",
      "status": "implemented",
      "priority": "high",
      "category": "feature",
      "created_date": "2025-10-22T00:00:00.000000",
      "updated_date": "2025-10-22T00:00:00.000000",
      "acceptance_criteria": [
        "Clear Filters button resets program buildout filter and shows all availability",
        "Delete button available on availability detail pages for future and past entries",
        "Delete confirmation dialog prevents accidental deletion",
        "Active availability cannot be deleted (must wait until past or manually archive)",
        "Archive functionality remains for bulk management of past entries",
        "HTMX updates work correctly for filter clearing and deletion"
      ]
    },
    {
      "id": "REQ-104",
      "title": "Booking-Based Feasibility Engine with Time-Gap Computation",
      "description": "Advanced feasibility system that computes which programs can fit in available time after subtracting bookings. Core algorithm merges overlapping rule windows into union, subtracts bookings to find free gaps, determines program feasibility based on duration, and finds valid start times. Month calendar enhanced to show feasible programs per day. Day details view displays visual timeline with rule windows (blue), bookings (red), free gaps (green), and booking form with dynamically populated valid start times. Booking creation updates view via HTMX. Handles all edge cases: complete overlap, partial overlap, split intervals, multiple concurrent bookings. Uses stdlib-only interval arithmetic with 15-minute minimum gaps and indexed queries for performance.",
      "status": "implemented",
      "priority": "high",
      "category": "feature",
      "created_date": "2025-10-22T00:00:00.000000",
      "updated_date": "2025-10-22T00:00:00.000000",
      "acceptance_criteria": [
        "Booking a 1-hour slot within 8-hour window leaves 7 hours available in gaps",
        "2-hour program disappears from feasible list when largest gap < 120 minutes",
        "Multiple overlapping rules create union of time windows",
        "Month calendar shows time ranges (e.g., '1-6p') and feasible program badges per day",
        "Clicking day opens modal with visual timeline showing windows/bookings/gaps",
        "Booking form only shows start times where selected program fits completely",
        "Creating booking refreshes day details via HTMX showing updated gaps",
        "Valid start times increment by 15 minutes within feasible ranges",
        "Program duration pulled from ProgramBuildoutScheduling model",
        "RuleBooking validates date/time falls within rule bounds",
        "Timeline uses color coding: blue (rules), red (bookings), green (gaps)",
        "Feasibility engine performance < 1ms per day, ~30ms for full month",
        "No external scheduling libraries - pure Python interval math",
        "Only contractor and admin can create bookings",
        "Children dropdown populated from parent's children"
      ]
    },
    {
      "id": "REQ-993",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-992",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-104",
      "title": "HTMX Delete Shows Immediate Banner Notification",
      "description": "When a contractor deletes an availability entry via HTMX on the availability list page, the system must immediately display a success or error banner notification without requiring navigation to another page. The notification banner should appear in the same HTMX response that updates the list.",
      "status": "implemented"
    },
    {
      "id": "REQ-991",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-990",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-989",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-988",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    },
    {
      "id": "REQ-987",
      "title": "Test",
      "description": "Test",
      "status": "implemented"
    },
    {
      "id": "REQ-986",
      "title": "Test2",
      "description": "Test2",
      "status": "implemented"
    }
  ],
  "metadata": {
    "version": "1.0",
    "last_updated": "2025-10-22T13:53:50.782062",
    "description": "Dynamic Discoveries project requirements tracking"
  }
}