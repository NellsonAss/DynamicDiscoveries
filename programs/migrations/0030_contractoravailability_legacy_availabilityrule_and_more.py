# Generated by Django 4.2.24 on 2025-10-21 23:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("programs", "0029_add_availability_archive_fields"),
    ]

    operations = [
        migrations.AddField(
            model_name="contractoravailability",
            name="legacy",
            field=models.BooleanField(
                default=False,
                help_text="Marks legacy per-day availability entries; hidden from contractor UI after migration to rules",
            ),
        ),
        migrations.CreateModel(
            name="AvailabilityRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Short label displayed on calendar (e.g., 'Monday afternoons', 'Summer intensive')",
                        max_length=200,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("WEEKLY_RECURRING", "Weekly Recurring"),
                            ("DATE_RANGE", "Date Range"),
                        ],
                        help_text="Type of recurrence pattern",
                        max_length=20,
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Start time for availability (e.g., 14:30)"
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        help_text="End time for availability (e.g., 17:00)"
                    ),
                ),
                (
                    "date_start",
                    models.DateField(
                        help_text="First date this rule applies (inclusive)"
                    ),
                ),
                (
                    "date_end",
                    models.DateField(
                        help_text="Last date this rule applies (inclusive)"
                    ),
                ),
                (
                    "weekdays_monday",
                    models.BooleanField(default=False, verbose_name="Monday"),
                ),
                (
                    "weekdays_tuesday",
                    models.BooleanField(default=False, verbose_name="Tuesday"),
                ),
                (
                    "weekdays_wednesday",
                    models.BooleanField(default=False, verbose_name="Wednesday"),
                ),
                (
                    "weekdays_thursday",
                    models.BooleanField(default=False, verbose_name="Thursday"),
                ),
                (
                    "weekdays_friday",
                    models.BooleanField(default=False, verbose_name="Friday"),
                ),
                (
                    "weekdays_saturday",
                    models.BooleanField(default=False, verbose_name="Saturday"),
                ),
                (
                    "weekdays_sunday",
                    models.BooleanField(default=False, verbose_name="Sunday"),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="America/New_York",
                        help_text="IANA timezone string (e.g., 'America/New_York', 'America/Los_Angeles')",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is currently active"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this availability rule",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contractor",
                    models.ForeignKey(
                        help_text="The contractor this availability rule belongs to",
                        limit_choices_to={"groups__name__in": ["Contractor", "Admin"]},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "programs_offered",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Program instances offered during this availability window",
                        related_name="availability_rules",
                        to="programs.programinstance",
                    ),
                ),
            ],
            options={
                "verbose_name": "Availability Rule",
                "verbose_name_plural": "Availability Rules",
                "ordering": ["-is_active", "date_start", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="AvailabilityException",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="The specific date this exception applies to"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SKIP", "Skip (no availability)"),
                            ("TIME_OVERRIDE", "Time Override"),
                        ],
                        help_text="Type of exception",
                        max_length=20,
                    ),
                ),
                (
                    "override_start_time",
                    models.TimeField(
                        blank=True,
                        help_text="Override start time (only for TIME_OVERRIDE type)",
                        null=True,
                    ),
                ),
                (
                    "override_end_time",
                    models.TimeField(
                        blank=True,
                        help_text="Override end time (only for TIME_OVERRIDE type)",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True, help_text="Optional note explaining this exception"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rule",
                    models.ForeignKey(
                        help_text="The availability rule this exception applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exceptions",
                        to="programs.availabilityrule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Availability Exception",
                "verbose_name_plural": "Availability Exceptions",
                "ordering": ["date"],
                "unique_together": {("rule", "date")},
            },
        ),
    ]
