# Generated by Django

from django.db import migrations, models
import django.db.models.deletion
from decimal import Decimal


def create_default_buildouts(apps, schema_editor):
    """Create default buildouts for existing program instances."""
    ProgramType = apps.get_model('programs', 'ProgramType')
    ProgramBuildout = apps.get_model('programs', 'ProgramBuildout')
    ProgramInstance = apps.get_model('programs', 'ProgramInstance')
    
    # Create default buildouts for each program type
    for program_type in ProgramType.objects.all():
        buildout, created = ProgramBuildout.objects.get_or_create(
            program_type=program_type,
            title="Default Buildout",
            defaults={
                'num_facilitators': 1,
                'num_new_facilitators': 0,
                'workshops_per_facilitator_per_year': 4,
                'students_per_workshop': 12,
                'sessions_per_workshop': 8,
                'new_workshop_concepts_per_year': 1,
            }
        )
        
        # Update all program instances for this program type to use this buildout
        ProgramInstance.objects.filter(program_type=program_type).update(buildout=buildout)


def reverse_create_default_buildouts(apps, schema_editor):
    """Reverse the buildout creation."""
    ProgramBuildout = apps.get_model('programs', 'ProgramBuildout')
    ProgramBuildout.objects.filter(title="Default Buildout").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('programs', '0005_alter_programrole_program_type'),
    ]

    operations = [
        # Add new fields to ProgramType
        migrations.AddField(
            model_name='programtype',
            name='scope',
            field=models.TextField(help_text='Learning scope and objectives', default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_num_facilitators',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_num_new_facilitators',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_workshops_per_facilitator_per_year',
            field=models.PositiveIntegerField(default=4),
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_students_per_workshop',
            field=models.PositiveIntegerField(default=12),
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_sessions_per_workshop',
            field=models.PositiveIntegerField(default=8),
        ),
        migrations.AddField(
            model_name='programtype',
            name='default_new_workshop_concepts_per_year',
            field=models.PositiveIntegerField(default=1),
        ),

        # Update Role model
        migrations.RenameField(
            model_name='role',
            old_name='responsibilities',
            new_name='description',
        ),
        migrations.AlterField(
            model_name='role',
            name='description',
            field=models.TextField(blank=True),
        ),

        # Update BaseCost model
        migrations.AddField(
            model_name='basecost',
            name='frequency',
            field=models.CharField(
                choices=[
                    ('PER_WORKSHOP_CONCEPT', 'Per Workshop Concept'),
                    ('PER_NEW_FACILITATOR', 'Per New Facilitator'),
                    ('PER_WORKSHOP', 'Per Workshop'),
                    ('PER_SESSION', 'Per Session'),
                    ('PER_STUDENT', 'Per Student'),
                    ('PER_YEAR', 'Per Year'),
                    ('ADMIN_FLAT', 'Admin Flat'),
                    ('OVERRIDE', 'Manual Override'),
                ],
                default='PER_STUDENT',
                help_text='How often this cost occurs',
                max_length=32,
            ),
        ),
        migrations.RenameField(
            model_name='basecost',
            old_name='cost_per_student',
            new_name='amount',
        ),
        migrations.AlterField(
            model_name='basecost',
            name='amount',
            field=models.DecimalField(
                decimal_places=2,
                help_text='Cost amount per frequency unit',
                max_digits=8,
            ),
        ),

        # Update ProgramBuildout model
        migrations.RemoveField(
            model_name='programbuildout',
            name='expected_students',
        ),
        migrations.RemoveField(
            model_name='programbuildout',
            name='num_days',
        ),
        migrations.RemoveField(
            model_name='programbuildout',
            name='sessions_per_day',
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='num_facilitators',
            field=models.PositiveIntegerField(help_text='Number of qualified facilitators working', default=1),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='num_new_facilitators',
            field=models.PositiveIntegerField(help_text='Number of new hires/turnover', default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='workshops_per_facilitator_per_year',
            field=models.PositiveIntegerField(help_text='Workshops each facilitator runs per year', default=4),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='students_per_workshop',
            field=models.PositiveIntegerField(help_text='Students per workshop', default=12),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='sessions_per_workshop',
            field=models.PositiveIntegerField(help_text='Sessions per workshop', default=8),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='new_workshop_concepts_per_year',
            field=models.PositiveIntegerField(default=1, help_text='New workshop concepts developed per year'),
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='programbuildout',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),

        # Create ResponsibilityFrequency choices
        migrations.CreateModel(
            name='ResponsibilityFrequency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),

        # Create BuildoutResponsibility model
        migrations.CreateModel(
            name='BuildoutResponsibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Responsibility name/title', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(
                    choices=[
                        ('PER_WORKSHOP_CONCEPT', 'Per Workshop Concept'),
                        ('PER_NEW_FACILITATOR', 'Per New Facilitator'),
                        ('PER_WORKSHOP', 'Per Workshop'),
                        ('PER_SESSION', 'Per Session'),
                        ('PER_STUDENT', 'Per Student'),
                        ('PER_YEAR', 'Per Year'),
                        ('ADMIN_FLAT', 'Admin Flat'),
                        ('OVERRIDE', 'Manual Override'),
                    ],
                    help_text='How often this responsibility occurs',
                    max_length=32,
                )),
                ('base_hours', models.DecimalField(
                    decimal_places=2,
                    help_text='Hours per frequency unit',
                    max_digits=6,
                )),
                ('override_hours', models.DecimalField(
                    blank=True,
                    decimal_places=2,
                    help_text='Manual override for total hours (ignores frequency calculation)',
                    max_digits=6,
                    null=True,
                )),
                ('buildout', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='responsibilities',
                    to='programs.programbuildout',
                )),
                ('role', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='programs.role',
                )),
            ],
            options={
                'ordering': ['role__name', 'name'],
                'unique_together': {('buildout', 'role', 'name')},
            },
        ),

        # Create BuildoutRoleAssignment model
        migrations.CreateModel(
            name='BuildoutRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent_of_revenue', models.DecimalField(
                    decimal_places=2,
                    help_text='Percentage of revenue this role represents',
                    max_digits=5,
                )),
                ('buildout', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='role_assignments',
                    to='programs.programbuildout',
                )),
                ('role', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='programs.role',
                )),
            ],
            options={
                'unique_together': {('buildout', 'role')},
            },
        ),

        # Create BuildoutBaseCost model
        migrations.CreateModel(
            name='BuildoutBaseCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('multiplier', models.DecimalField(
                    decimal_places=2,
                    default=1.0,
                    help_text='Multiplier for the base cost',
                    max_digits=6,
                )),
                ('base_cost', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='programs.basecost',
                )),
                ('buildout', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='baseline_costs',
                    to='programs.programbuildout',
                )),
            ],
            options={
                'unique_together': {('buildout', 'base_cost')},
            },
        ),

        # Create default buildouts for existing data
        migrations.RunPython(create_default_buildouts, reverse_create_default_buildouts),

        # Update ProgramInstance model
        migrations.RemoveField(
            model_name='programinstance',
            name='instructor',
        ),
        migrations.AddField(
            model_name='programinstance',
            name='title',
            field=models.CharField(default='', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='programinstance',
            name='actual_enrollment',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='programinstance',
            name='override_counts',
            field=models.JSONField(
                blank=True,
                help_text='JSON object with buildout count overrides (e.g., {\'students_per_workshop\': 8})',
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='programinstance',
            name='buildout',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='instances',
                to='programs.programbuildout',
            ),
        ),

        # Create InstanceRoleAssignment model
        migrations.CreateModel(
            name='InstanceRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('override_hours', models.DecimalField(
                    blank=True,
                    decimal_places=2,
                    help_text='Override hours for this assignment',
                    max_digits=6,
                    null=True,
                )),
                ('override_revenue_share', models.DecimalField(
                    blank=True,
                    decimal_places=2,
                    help_text='Override revenue share percentage',
                    max_digits=5,
                    null=True,
                )),
                ('computed_payout', models.DecimalField(
                    blank=True,
                    decimal_places=2,
                    help_text='Computed payout amount',
                    max_digits=8,
                    null=True,
                )),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contractor', models.ForeignKey(
                    limit_choices_to={'groups__name__in': ['Contractor', 'Admin']},
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='role_assignments',
                    to='accounts.user',
                )),
                ('program_instance', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='contractor_assignments',
                    to='programs.programinstance',
                )),
                ('role', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='programs.role',
                )),
            ],
            options={
                'unique_together': {('program_instance', 'role')},
            },
        ),

        # Remove old models
        migrations.DeleteModel(
            name='ProgramRole',
        ),
        migrations.DeleteModel(
            name='ProgramBaseCost',
        ),
        migrations.DeleteModel(
            name='ResponsibilityFrequency',
        ),
    ]
